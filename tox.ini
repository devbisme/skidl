# Tox configuration file

[tox]
; minversion = 3.15
envlist = 
    py{36,37,38,39,310,311,312,313}
    kicad{5,6,7,8,9}
; requires = virtualenv<20.22.0
skip_missing_interpreters = true


[pytest]
addopts = --tb=short --color=yes --ignore=examples
filterwarnings =
    ignore::DeprecationWarning


[testenv:py{36,37,38,39,310,311,312,313},kicad{5,6,7,8,9}]
description = test everything including SKiDL SPICE functions and schematic generation
isolated_build = True
passenv = *
setenv =
    SKIDL_TOOL = KICAD9
    TEST_SPICE = 0
    kicad5: SKIDL_TOOL = KICAD5
    kicad6: SKIDL_TOOL = KICAD6
    kicad7: SKIDL_TOOL = KICAD7
    kicad8: SKIDL_TOOL = KICAD8
    kicad9: SKIDL_TOOL = KICAD9
    kicad9: TEST_SPICE = 1
extras = testing
deps =
    pytest
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    pytest


[coverage:run]
branch = True
source = {toxinidir}/skidl
omit = *_sklib.py


[coverage:report]
sort = -Cover


[testenv:coverage]
basepython = python3.12
description = test code coverage
setenv = TOXINIDIR = {toxinidir}
passenv = *
deps =
    pytest
    pytest-coverage
    matplotlib
changedir = {toxinidir}/tests
commands =
    pip install -e {toxinidir}
    pytest -m "spice" --cov-config={toxinidir}/tox.ini --cov={toxinidir}/skidl


[testenv:{clean,build}]
description =
    Build (or clean) the package in isolation according to instructions in:
    https://setuptools.readthedocs.io/en/latest/build_meta.html#how-to-use-it
    https://github.com/pypa/pep517/issues/91
    https://github.com/pypa/build
setenv =
    DOCSRC = {toxinidir}/docsrc
# NOTE: build is still experimental, please refer to the links for updates/issues
skip_install = True
changedir = {toxinidir}
allowlist_externals =
    make
    find
deps =
    build: build[virtualenv]
commands =
    clean: python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    clean: find {toxinidir} ( -name '*.erc' -or -name '*.log' ) -delete
    clean: make -C {env:DOCSRC}/sphinx clean
    clean: make -C {env:DOCSRC}/pelicansite clean
    build: python -m build .
# By default `build` produces wheels, you can also explicitly use the flags `--sdist` and `--wheel`


[testenv:{docs,devserver,doctest}]
# To view pelican site:
#   tox -e docs
#   ln -s docs skidl
#   python -m http.server
#   Open http://0.0.0.0:8000/skidl in browser
# Create llms.txt and llms-full.txt files:
#   Go to llms-txt.io.
#   Place the llms.txt and llms-full.txt files in the top-level of the docs directory.
description = build documentation using pelican and sphinx.
setenv =
    DOCSRC = {toxinidir}/docsrc
    BUILDDIR = {toxinidir}/docs
    docs: BUILD = publish
    devserver: BUILD = devserver
    doctest: BUILD = doctest
deps =
    ; -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
    # This causes doctests to fail. Don't know why.
allowlist_externals =
    make
    sphinx-build
commands =
    docs: make -C {env:DOCSRC}/pelicansite {env:BUILD}
    docs: make -C {env:DOCSRC}/sphinx html
    devserver: make -C {env:DOCSRC}/sphinx html
    devserver: make -C {env:DOCSRC}/pelicansite {env:BUILD}
    doctest: sphinx-build -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSRC}/sphinx" "{env:BUILDDIR}" {posargs}
    doctest: find {toxinidir} ( -name '*.erc' -or -name '*.log' ) -delete


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository testpypi} dist/*
